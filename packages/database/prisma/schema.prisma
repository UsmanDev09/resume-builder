datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Resume {
  id               String           @id @default(cuid())
  userid           String
  selectedTemplate String
  title            String?
  description      String?
  photoUrl         String?
  colorHex         String           @default("#000000")
  borderStyle      String           @default("squircle")
  summary          String?
  firstName        String?
  lastName         String?
  jobTitle         String?
  city             String?
  country          String?
  phone            String?
  email            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  WorkExperience   WorkExperience[]
  Education        Education[]
  skills           String[]

  @@map("resumes")
}

model WorkExperience {
  id          String    @id @default(cuid())
  position    String?
  company     String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
  resumeId    String
  resume      Resume    @relation(fields: [resumeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_experiences")
}

model Education {
  id        String    @id @default(cuid())
  degree    String?
  school    String?
  startDate DateTime?
  endDate   DateTime?
  resumeId  String
  resume    Resume    @relation(fields: [resumeId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("educations")
}
model scraped_jobs {
  id                    Int       @id @default(autoincrement())
  job_id                String?
  site                  String?
  job_url               String?
  job_url_direct        String?
  title                 String?
  company               String?
  location              String?
  date_posted           DateTime? @db.Timestamp(6)
  job_type              String?
  salary_source         String?
  interval              String?
  min_amount            Decimal?  @db.Decimal
  max_amount            Decimal?  @db.Decimal
  currency              String?
  is_remote             Boolean?
  job_level             String?
  job_function          String?
  listing_type          String?
  emails                String?
  description           String?
  company_industry      String?
  company_url           String?
  company_logo          String?
  company_url_direct    String?
  company_addresses     String?
  company_num_employees String?
  company_revenue       String?
  company_description   String?
  skills                String?
  experience_range      String?
  company_rating        Decimal?  @db.Decimal
  company_reviews_count Int?
  vacancy_count         Int?
  work_from_home_type   String?
}