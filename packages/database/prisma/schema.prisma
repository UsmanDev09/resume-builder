datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Resume {
  id                String           @id @default(cuid())
  userid            String
  selectedTemplate  String
  title             String?
  description       String?
  photoUrl          String?
  primaryColorHex   String           @default("#000000")
  secondaryColorHex String           @default("#000000")
  primaryFontSize   String?
  secondaryFontSize String?
  fontStyle         String?
  borderStyle       String           @default("squircle")
  summary           String?
  firstName         String?
  lastName          String?
  jobTitle          String?
  city              String?
  country           String?
  phone             String?
  email             String?
  linkedin          String?
  github            String?
  website           String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  workExperience    WorkExperience[]
  education         Education[]
  projects          Project[]
  certificates      Certificate[]
  languages         Language[]
  skillSections     SkillSection[]

  @@map("resumes")
}

model WorkExperience {
  id          String    @id @default(cuid())
  position    String?
  company     String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
  resumeId    String
  resume      Resume    @relation(fields: [resumeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_experiences")
}

model Education {
  id        String    @id @default(cuid())
  degree    String?
  school    String?
  startDate DateTime?
  endDate   DateTime?
  resumeId  String
  resume    Resume    @relation(fields: [resumeId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("educations")
}

model Project {
  id          String    @id @default(cuid())
  name        String?
  role        String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
  Resume      Resume?   @relation(fields: [resumeId], references: [id])
  resumeId    String?

  @@map("projects")
}

model Language {
  id String @id @default(cuid())

  name        String?
  proficiency Profieciency?
  Resume      Resume?       @relation(fields: [resumeId], references: [id])
  resumeId    String?

  @@map("languages")
}

model Certificate {
  id             String    @id @default(cuid())
  name           String?
  completionDate DateTime?
  source         String?
  link           String?
  Resume         Resume?   @relation(fields: [resumeId], references: [id])
  resumeId       String?

  @@map("certificates")
}

model SkillSection {
  id       String   @id @default(cuid())
  name     String
  skills   String[]
  order    Int      @default(0)
  resumeId String
  resume   Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("skill_sections")
}

model Review {
  id            String   @id @default(cuid())
  text          String   @db.Text
  rating        Int      @default(5)
  displayName   String?  // Optional display name for the review
  pictureUrl    String?  // Optional profile picture URL
  twitterHandle String?  // Optional Twitter handle
  linkedinUrl   String?  // Optional LinkedIn URL
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("reviews")
}

enum Profieciency {
  fluent
  proficient
  conversational
}


